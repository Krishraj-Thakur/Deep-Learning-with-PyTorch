üìå TensorBoard Notes
1Ô∏è‚É£ What is TensorBoard?
A visualization tool for monitoring and debugging deep learning models.

Helps in analyzing scalars, graphs, images, histograms, and PR curves.

Works with PyTorch, TensorFlow, and other frameworks.

2Ô∏è‚É£ Why Use TensorBoard?
‚úÖ Tracks training progress (loss, accuracy, etc.).
‚úÖ Visualizes model architecture and computation graphs.
‚úÖ Displays image data (e.g., input samples, feature maps).
‚úÖ Monitors weight updates and gradients using histograms.
‚úÖ Helps in hyperparameter tuning (e.g., learning rate optimization).

3Ô∏è‚É£ How to Use TensorBoard in PyTorch?
1Ô∏è‚É£ Import TensorBoard

from torch.utils.tensorboard import SummaryWriter
writer = SummaryWriter('runs/experiment1')  # Creates a log directory


2Ô∏è‚É£ Log Scalars (e.g., loss, accuracy)
writer.add_scalar('Loss/train', loss, epoch)
writer.add_scalar('Accuracy/train', acc, epoch)


3Ô∏è‚É£ Visualize Model Graph
writer.add_graph(model, sample_input)


4Ô∏è‚É£ Log Images
img_grid = torchvision.utils.make_grid(images)
writer.add_image('MNIST images', img_grid)


5Ô∏è‚É£ Log Precision-Recall Curve
writer.add_pr_curve('PR Curve', labels, predictions, global_step=0)


6Ô∏è‚É£ Close TensorBoard Writer
writer.close()


4Ô∏è‚É£ Running TensorBoard
In your terminal, run:

tensorboard --logdir=runs
Open localhost:6006 in your browser.

5Ô∏è‚É£ Key TensorBoard Components
Feature	Purpose
Scalars	Tracks values like loss, accuracy over time.
Graphs	Visualizes the computation graph of the model.
Images	Displays images from datasets or feature maps.
Histograms	Shows weight and activation distributions.
PR Curves	Precision-Recall curves for classification tasks.
6Ô∏è‚É£ Best Practices
üîπ Log loss and accuracy during training.
üîπ Add model graphs to verify architecture.
üîπ Monitor weight updates to detect issues like vanishing gradients.
üîπ Use PR curves for multi-class classification performance.